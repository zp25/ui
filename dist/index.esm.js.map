{"version":3,"file":"index.esm.js","sources":["../src/group.js","../src/carousel.js","../constants/cssCustomProps.js","../constants/process.js","../src/imageLoader.js","../src/modal.js","../src/swipe.js","../src/swipeCarousel.js"],"sourcesContent":["/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"_group\"] }] */\n\nimport { Subject } from 'zp-lib';\n\n/**\n * @class\n * @implements {Subject}\n */\nclass Group extends Subject {\n  /**\n   * 新建Group实例，通用类\n   * @param {string} group - 分组\n   */\n  constructor(group) {\n    super();\n\n    if (!group) {\n      throw new Error('Please choose a group');\n    }\n\n    /**\n     * 实例分组，用于单页多实例间区分\n     * @type string\n     * @private\n     */\n    this._group = String(group);\n  }\n\n  /**\n   * 获取分组\n   * @type {string}\n   * @public\n   */\n  get group() {\n    return this._group;\n  }\n}\n\nexport default Group;\n","/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"_options\"] }] */\n\nimport Group from './group';\n\n/**\n * @class\n * @implements {Group}\n */\nclass Carousel extends Group {\n  /**\n   * 当前是否自动播放\n   * @type {Boolean}\n   * @private\n   */\n  isAutoplay = false;\n\n  /**\n   * 自动播放定时器\n   * @type {Number}\n   * @private\n   */\n  timeoutID = NaN;\n\n  /**\n   * 新建Carousel实例\n   * @param {string} [group='main'] - 组件分类\n   * @param {Object} [opts={}] - 配置\n   * @augments {Group}\n   */\n  constructor(group = 'main', opts = {}) {\n    super(group);\n\n    if (typeof opts !== 'object' || !opts) {\n      throw new TypeError('not an Object');\n    }\n\n    const {\n      length,\n      focus,\n      delay,\n    } = opts;\n\n    // Carousel配置，不可变\n    this._options = {\n      length: ~~length || 1,\n      focus: ~~focus || 1,\n      delay: ~~delay || 8000,\n    };\n\n    Object.freeze(this._options);\n\n    /**\n     * 状态\n     * @type {Object}\n     * @property {number} focus - 当前聚焦页\n     */\n    this.state = {\n      focus: 0, // 使用this.play, this.autoplay初始化并启动\n    };\n  }\n\n  /**\n   * 读取配置\n   * @type {Object}\n   * @property {number} length - 总页数\n   * @property {number} focus - 初始聚焦页，没有上边界判断\n   * @property {number} delay - 轮播延时\n   * @desc 初始化后不应该被修改，为避免修改而添加getter\n   * @public\n   */\n  get options() {\n    return { ...this._options };\n  }\n\n  /**\n   * 当前聚焦页\n   * @type {number}\n   * @public\n   */\n  get focus() {\n    const { focus } = this.state;\n\n    return focus;\n  }\n\n  /**\n   * 初始化自动播放\n   * @protected\n   * @ignore\n   */\n  setAutoplay() {\n    if (this.isAutoplay) {\n      const { delay } = this.options;\n      this.timeoutID = setTimeout(this.play.bind(this), delay);\n    }\n  }\n\n  /**\n   * 清理自动播放\n   * @protected\n   * @ignore\n   */\n  clearAutoplay() {\n    if (this.timeoutID) {\n      clearTimeout(this.timeoutID);\n      this.timeoutID = NaN;\n    }\n  }\n\n  /**\n   * 播放指定页，尝试启动自动播放\n   * @description subject.state更新唯一入口,控制state质量\n   * @param {number} to - 下一页编号\n   * @protected\n   * @ignore\n   */\n  go(to) {\n    const {\n      focus: initFocus,\n      length,\n    } = this.options;\n\n    const nextid = ~~to;\n\n    this.setState({\n      focus: nextid > 0 && nextid <= length ? nextid : initFocus,\n    });\n\n    this.setAutoplay();\n  }\n\n  /**\n   * 获取下一播放页编号，若首次运行或this.focus不规范，聚焦到this.options.focus\n   * @param {boolean} reverse=false - 是否反向播放，反向指播放页编号比当前页小1\n   * @return {number} 下一页编号\n   * @protected\n   * @ignore\n   */\n  next(reverse = false) {\n    const {\n      focus: initFocus,\n      length,\n    } = this.options;\n\n    const focus = ~~this.focus;\n\n    // 首次执行或不规范focus\n    if (!focus) {\n      return initFocus;\n    }\n\n    if (reverse) {\n      return focus <= 1 ? length : focus - 1;\n    }\n\n    return focus >= length ? 1 : focus + 1;\n  }\n\n  /**\n   * 播放下一页或指定页\n   * @desc 修改聚焦页的唯一入口\n   * @param {(boolean|number)} reverse - 是否反向播放，若number将播放指定页\n   * @public\n   */\n  play(reverse = false) {\n    // 总应该尝试清理旧的自动播放\n    this.clearAutoplay();\n\n    if (typeof reverse === 'boolean') {\n      this.go(this.next(reverse));\n    } else {\n      this.go(reverse);\n    }\n  }\n\n  /**\n   * 开启自动播放，并播放下一页\n   * @public\n   */\n  autoplay() {\n    this.isAutoplay = true;\n    this.play();\n  }\n\n  /**\n   * 暂停自动播放\n   * @public\n   */\n  pause() {\n    this.isAutoplay = false;\n    this.clearAutoplay();\n  }\n}\n\nexport default Carousel;\n","/**\n * 页数\n * @type {String}\n */\nexport const PROP_LEN = '--banner-length';\n\n/**\n * 聚焦页\n * @type {String}\n */\nexport const PROP_FOCUS = '--banner-focus';\n\n/**\n * touchMove和mouseMove事件滑动距离\n * @type {String}\n */\nexport const PROP_DX = '--banner-dx';\n\n/**\n * 动画效果的剩余运行时间\n * @type {String}\n */\nexport const PROP_DURATION = '--banner-duration';\n","/**\n * 异步操作默认状态\n * @type {Number}\n */\nexport const PROCESS_PENDING = 0;\n\n/**\n * 异步操作开始\n * @type {Number}\n */\nexport const PROCESS_START = 1;\n\n/**\n * 异步操作完成\n * @type {Number}\n */\nexport const PROCESS_DONE = 2;\n\n/**\n * 异步操作失败\n * @type {Number}\n */\nexport const PROCESS_ERROR = -1;\n","/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"_options\"] }] */\n\nimport Group from './group';\nimport {\n  PROCESS_START,\n  PROCESS_DONE,\n  PROCESS_ERROR,\n} from '../constants';\n\n/**\n * style观察者\n * @return {Observer}\n */\nconst styleObserver = ({\n  replace = 'replace',\n  done = 'done',\n  error = 'error',\n}) => ({\n  /**\n   * 控制image-loader样式\n   * @param {Object} state - 状态\n   * @param {HTMLElement} state.loader - 需加载的对象\n   * @param {number} status - 当前处于的加载阶段\n   * @ignore\n   */\n  update: (state) => {\n    const {\n      loader,\n      status,\n    } = state;\n\n    if (status === PROCESS_START) {\n      // 立即将loader移出loaders\n      loader.classList.remove(replace);\n    } else if (status === PROCESS_DONE) {\n      // 隐藏thumbnail\n      loader.classList.add(done);\n    } else if (status === PROCESS_ERROR) {\n      loader.classList.add(error);\n    }\n  },\n});\n\n/**\n * @class\n * @implements {Group}\n */\nclass ImageLoader extends Group {\n  /**\n   * 元素是否在y轴可视范围内\n   * @param {HTMLElement} item - 需要检测是否在可视范围的元素\n   * @return {boolean}\n   */\n  static inview(item) {\n    const rect = item.getBoundingClientRect();\n    const itemT = rect.top;\n    const itemB = itemT + rect.height;\n\n    return itemB > 0 && itemT < window.innerHeight;\n  }\n\n  /**\n   * 加载图片\n   * @param {HTMLElement} loader - 正在操作的loader\n   * @param {string} [className='image'] - 图片要添加的类名\n   * @private\n   */\n  static loadImage(loader, className = 'image') {\n    const reserved = ['src', 'alt', 'crossorigin'];\n\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.classList.add(className, `${className}--full`);\n\n      Object.entries(loader.dataset).forEach(([key, val]) => {\n        if (reserved.includes(key)) {\n          img[key] = val;\n        } else {\n          img.dataset[key] = val;\n        }\n      });\n\n      img.onload = () => {\n        resolve(img);\n      };\n\n      img.onerror = () => {\n        reject(img.src);\n      };\n    });\n  }\n\n  /**\n   * 新建ImageLoader实例\n   * @param {string} [group='main'] - 组件分类\n   * @param {Object} [opts={}] - 配置\n   * @param {string} [opts.replace='replace'] - 未完成替换元素的类名\n   * @param {string} [opts.done='done'] - 替换成功元素的类名\n   * @param {string} [opts.error='error'] - 替换失败元素的类名\n   * @param {string} [opts.image='image'] - 图片类名\n   * @augments {Group}\n   */\n  constructor(group = 'main', opts = {}) {\n    super(group);\n\n    if (typeof opts !== 'object' || !opts) {\n      throw new TypeError('not an Object');\n    }\n\n    const {\n      replace = 'replace',\n      done = 'done',\n      error = 'error',\n      image = 'image',\n    } = opts;\n\n    this._options = {\n      replace,\n      done,\n      error,\n      image,\n    };\n\n    Object.freeze(this._options);\n\n    /**\n     * 状态\n     * @type {Object}\n     * @property {HTMLElement} loader - 当前loader\n     * @property {number} status - 当前loader所处状态\n     */\n    this.state = {\n      loader: null,\n      status: PROCESS_DONE,\n    };\n\n    // 添加默认observer\n    this.attach(styleObserver(this.options));\n  }\n\n  /**\n   * 读取配置\n   * @type {Object}\n   * @property {string} replace - 未完成替换元素的类名\n   * @property {string} done - 替换成功元素的类名\n   * @property {string} error - 替换失败元素的类名\n   * @property {string} image - 图片类名\n   * @desc 初始化后不应该被修改，为避免修改而添加getter\n   * @public\n   */\n  get options() {\n    return { ...this._options };\n  }\n\n  /**\n   * loader加载成功\n   * @param {HTMLElement} loader - 成功的loader\n   * @param {HTMLImageElement} image - 写入的Image对象\n   * @private\n   */\n  done(loader, image) {\n    loader.appendChild(image);\n\n    this.setState({\n      loader,\n      status: PROCESS_DONE,\n    });\n  }\n\n  /**\n   * loader加载失败\n   * @param {HTMLElement} loader - 失败的loader\n   * @private\n   */\n  error(loader) {\n    this.setState({\n      loader,\n      status: PROCESS_ERROR,\n    });\n  }\n\n  /**\n   * 延时加载，遍历loaders查找符合条件loader\n   * @param {string} [className='image-loader'] - 目标元素类名\n   * @return {Promise}\n   * @public\n   */\n  load(className = 'image-loader') {\n    const {\n      replace,\n      image: imgName,\n    } = this.options;\n\n    const list = Array.from(\n      document.getElementsByClassName(`${className} ${replace}`),\n    );\n\n    return Promise.all(list.map((loader) => {\n      if (this.constructor.inview(loader)) {\n        this.setState({\n          loader,\n          status: PROCESS_START,\n        });\n\n        return this.constructor.loadImage(loader, imgName).then((image) => {\n          this.done(loader, image);\n\n          return {\n            src: image.src,\n            done: true,\n          };\n        }, (src) => {\n          this.error(loader);\n\n          return {\n            src,\n            error: true,\n          };\n        });\n      }\n\n      return false;\n    }));\n  }\n}\n\nexport default ImageLoader;\nexport {\n  styleObserver,\n};\n","import { machine } from 'zp-lib';\nimport Group from './group';\n\n/**\n * dialog状态查询字典\n * @type {Object}\n * @ignore\n */\nconst ModalDict = {\n  visible: {\n    MODALCLOSE: 'hidden',\n    MODALOPEN: 'visible',\n  },\n  hidden: {\n    MODALOPEN: 'visible',\n  },\n};\n\n// 添加状态机\nconst modalMachine = machine(ModalDict);\n\n/**\n * @class\n * @implements {Group}\n */\nclass Modal extends Group {\n  /**\n   * 关联core state和fsm\n   * @param {boolean} modal - core state中modal是否显示\n   * @return {string}\n   * @ignore\n   */\n  static currentState(modal) {\n    if (typeof modal !== 'boolean') {\n      throw new TypeError('double check modal state');\n    }\n\n    return modal ? 'visible' : 'hidden';\n  }\n\n  /**\n   * 新建Modal实例\n   * @desc 保证同一时间仅一个dialog显示\n   * @param {string} [group='main'] - 组件分类，区别单页中多个Modal组件\n   * @augments {Group}\n   */\n  constructor(group = 'main') {\n    super(group);\n\n    /**\n     * 状态\n     * @type {Object}\n     * @property {boolean} modal - modal是否开启\n     * @property {string} dialog - 聚焦的dialog\n     */\n    this.state = {\n      modal: false,\n      dialog: '',\n    };\n  }\n\n  /**\n   * 提示窗口\n   * @param {string} name - dialog名称\n   * @return {boolean} - 是否尝试修改状态\n   * @public\n   */\n  prompt(dialog = '') {\n    const { modal } = this.state;\n\n    const currentState = this.constructor.currentState(modal);\n    const nextState = modalMachine(currentState)('MODALOPEN');\n\n    if (nextState === 'visible') {\n      this.setState({\n        modal: true,\n        dialog: dialog.toString(),\n      });\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * loading效果\n   * @public\n   */\n  loading() {\n    this.prompt('loading');\n  }\n\n  /**\n   * 显示Modal，不显示任何dialog\n   * @public\n   */\n  open() {\n    this.prompt();\n  }\n\n  /**\n   * 隐藏Modal，不显示任何dialog\n   * @return {boolean} - 是否尝试修改状态\n   * @public\n   */\n  close() {\n    const { modal } = this.state;\n\n    const currentState = this.constructor.currentState(modal);\n    const nextState = modalMachine(currentState)('MODALCLOSE');\n\n    if (nextState === 'hidden') {\n      this.setState({\n        modal: false,\n        dialog: '',\n      });\n\n      return true;\n    }\n\n    return false;\n  }\n}\n\nexport default Modal;\n","/**\n * @typedef {Object} Dimention\n * @property {number} dx - x轴方向移动距离\n * @property {number} dy - y轴方向移动距离\n * @property {number} absDx - x轴方向移动距离绝对值\n * @property {number} absDy - y轴方向移动距离绝对值\n */\n\n/**\n * @typedef {Object} Position\n * @property {number} clientX\n * @property {number} clientY\n */\n\nimport { machine } from 'zp-lib';\nimport Group from './group';\n\n/**\n * 滑动动作状态查询字典\n * @type {Object}\n * @ignore\n */\nconst SwipeDict = {\n  start: {\n    SWIPEMOVE: 'move',\n    SWIPEEND: 'end',\n  },\n  move: {\n    SWIPEMOVE: 'move',\n    SWIPEEND: 'end',\n  },\n  end: {\n    SWIPESTART: 'start',\n  },\n};\n\n// 添加状态机\nconst swipeMachine = machine(SwipeDict);\n\n/**\n * @class\n * @implements {Group}\n */\nclass Swipe extends Group {\n  /**\n   * 统一定位时使用的对象\n   * @param {(MouseEvent|TouchEvent)} e - 事件对象\n   * @return {(MouseEvent|Touch)}\n   * @public\n   */\n  static unify(e) {\n    return e.changedTouches ? e.changedTouches[0] : e;\n  }\n\n  /**\n   * 获取尺寸信息\n   * @param {number} x0 - 起始x坐标\n   * @param {number} y0 - 起始y坐标\n   * @param {number} x1 - 结束x坐标\n   * @param {number} y1 - 结束y坐标\n   * @return {Dimention} 尺寸信息\n   * @public\n   */\n  static dimention(x0, y0, x1, y1) {\n    const dx = x1 - x0;\n    const dy = y1 - y0;\n\n    return {\n      dx,\n      dy,\n      absDx: Math.abs(dx),\n      absDy: Math.abs(dy),\n    };\n  }\n\n  /**\n   * 是否在边缘页且正在向空白部分滑动\n   * @param {number} length - 总页数\n   * @param {number} focus - 当前聚焦页编号\n   * @param {number} dx - 水平方向移动距离\n   * @return {boolean}\n   * @public\n   */\n  static isEdge(length, focus, dx) {\n    return (focus === 1 && dx > 0) || (focus === length && dx < 0);\n  }\n\n  constructor(group = 'main') {\n    super(group);\n\n    /**\n     * 状态\n     * @type {Object}\n     * @property {string} swipe - swipe当前状态\n     * @property {number} x0 - swipe起始x坐标\n     * @property {number} y0 - swipe起始y坐标\n     * @property {number} x1 - swipe当前/结束x坐标\n     * @property {number} y1 - swipe当前/结束y坐标\n     */\n    this.state = {\n      swipe: 'end',\n      x0: 0,\n      y0: 0,\n      x1: 0,\n      y1: 0,\n    };\n  }\n\n  /**\n   * 事件调度\n   * @description 绑定fsm和对象实例，依照fsm信息完成匹配动作\n   * @param {string} action - fsm输入\n   * @return {Function}\n   * @private\n   */\n  dispatch(action) {\n    /**\n     * @param {(MouseEvent|TouchEvent)} e - 事件对象\n     * @ignore\n     */\n    return (e) => {\n      const { swipe: currentState } = this.state;\n      const nextState = swipeMachine(currentState)(action);\n\n      if (nextState) {\n        const {\n          clientX,\n          clientY,\n        } = this.constructor.unify(e);\n        const pos = {\n          clientX,\n          clientY,\n        };\n\n        if (nextState === 'start') {\n          this.swipeStart(pos);\n        } else if (nextState === 'move') {\n          this.swipeMove(pos);\n        } else if (nextState === 'end') {\n          this.swipeEnd(pos);\n        }\n      }\n    };\n  }\n\n  /**\n   * 滑动动作开始\n   * @param {Position} pos - 位置信息\n   * @protected\n   * @ignore\n   */\n  swipeStart(pos) {\n    const {\n      clientX: x0,\n      clientY: y0,\n    } = pos;\n\n    this.setState({\n      swipe: 'start',\n      x0,\n      y0,\n    });\n  }\n\n  /**\n   * 滑动动作\n   * @param {Position} pos - 位置信息\n   * @protected\n   * @ignore\n   */\n  swipeMove(pos) {\n    const {\n      clientX: x1,\n      clientY: y1,\n    } = pos;\n\n    this.setState({\n      swipe: 'move',\n      x1,\n      y1,\n    });\n  }\n\n  /**\n   * 滑动动作结束\n   * @param {Position} pos - 位置信息\n   * @protected\n   * @ignore\n   */\n  swipeEnd(pos) {\n    const {\n      clientX: x1,\n      clientY: y1,\n    } = pos;\n\n    this.setState({\n      swipe: 'end',\n      x1,\n      y1,\n    });\n  }\n\n  /**\n   * 触发SWIPESTART事件\n   * @param {(MouseEvent|TouchEvent)} e - 事件对象\n   * @public\n   */\n  start(e) {\n    this.dispatch('SWIPESTART')(e);\n  }\n\n  /**\n   * 触发SWIPEMOVE事件\n   * @param {(MouseEvent|TouchEvent)} e - 事件对象\n   * @public\n   */\n  move(e) {\n    this.dispatch('SWIPEMOVE')(e);\n  }\n\n  /**\n   * 触发SWIPEEND事件\n   * @param {(MouseEvent|TouchEvent)} e - 事件对象\n   * @public\n   */\n  end(e) {\n    this.dispatch('SWIPEEND')(e);\n  }\n}\n\nexport default Swipe;\n","import Carousel from './carousel';\nimport Swipe from './swipe';\nimport {\n  PROP_LEN,\n  PROP_FOCUS,\n  PROP_DX,\n  PROP_DURATION,\n} from '../constants';\n\n/**\n * 主区域(banner)观察者\n * @desc 通过修改css自定义变量改变banner聚焦页\n * @param {Element} main - Carousel组件主区域(banner)\n * @return {Observer}\n */\nconst bannerObserver = main => ({\n  /**\n   * banner切换\n   * @param {Object} state - 状态\n   * @param {number} state.focus - 聚焦页编号\n   * @ignore\n   */\n  update: (state) => {\n    const { focus } = state;\n\n    main.style.setProperty(PROP_FOCUS, focus);\n  },\n});\n\n/**\n * 滑动效果观察者\n * @desc 注意有特定的滑动效果和记录状态方式\n * @param {Subject} carousel - SwipeCarousel实例\n * @param {Element} main - Carousel组件主区域(banner)\n * @return {Observer}\n */\nconst swipeObserver = (carousel, main) => {\n  const CLASS_SWIPE = 'carousel__main--swipe';\n\n  return {\n    /**\n     * 开始滑动，修改样式\n     * @ignore\n     */\n    start() {\n      main.classList.add(CLASS_SWIPE);\n    },\n\n    /**\n     * 滑动过程中，修改样式\n     * @param {Dimention}\n     * @ignore\n     */\n    move({\n      dx,\n      absDx,\n      absDy,\n    }) {\n      if (absDx >= absDy) {\n        const {\n          length,\n          focus,\n          offsetWidth,\n        } = carousel;\n\n        let rDx = dx;\n\n        if (Swipe.isEdge(length, focus, dx)) {\n          // 计算滑动和移动比例，使边界滑动有阻力效果；方向有关\n          rDx = Math.sin((dx / offsetWidth) * Math.PI * 0.5) * 0.42 * offsetWidth;\n        }\n\n        // 记录移动距离\n        main.style.setProperty(PROP_DX, `${rDx}px`);\n      }\n    },\n\n    /**\n     * 滑动结束，修改样式，通知carousel是否播放下一页\n     * @param {Dimention}\n     * @return {boolean}\n     * @ignore\n     */\n    end({\n      dx,\n      absDx,\n      absDy,\n    }) {\n      const {\n        length,\n        focus,\n        offsetWidth,\n      } = carousel;\n\n      // 重置样式\n      main.classList.remove(CLASS_SWIPE);\n\n      // 调整duration，使动画时长和剩余滑动距离关联；方向无关\n      const ratio = absDx / offsetWidth;\n      const duration = Swipe.isEdge(length, focus, dx) ? 1 : 1 - ratio;\n\n      // 重置移动距离\n      main.style.setProperty(PROP_DX, '0px');\n      // 设置剩余时间\n      main.style.setProperty(PROP_DURATION, duration);\n\n      if (ratio < 0.1 || absDx < absDy) {\n        // 不播放时，需要判断是否重启autoplay\n        carousel.setAutoplay();\n        return false;\n      }\n\n      // 否则播放下一页\n      carousel.play(Math.sign(dx) > 0);\n      return true;\n    },\n\n    /**\n     * @ignore\n     */\n    update({\n      swipe,\n      x0,\n      y0,\n      x1,\n      y1,\n    }) {\n      if (swipe === 'start') {\n        this.start();\n      } else if (swipe === 'move') {\n        this.move(Swipe.dimention(x0, y0, x1, y1));\n      } else if (swipe === 'end') {\n        this.end(Swipe.dimention(x0, y0, x1, y1));\n      }\n    },\n  };\n};\n\n/**\n * @class\n * @implements {Carousel}\n * @desc 为carousel添加swipe功能, 与DOM结构强关联\n */\nclass SwipeCarousel extends Carousel {\n  constructor(group = 'main', opts = {}) {\n    const query = `.carousel${group ? `[data-group=\"${group}\"]` : ''}`;\n\n    const slideBanner = document.querySelectorAll(`${query} .slide-banner`);\n    const length = slideBanner ? slideBanner.length : 1;\n\n    super(group, { length, ...opts });\n\n    /**\n     * Carousel组件容器\n     * @type {Element}\n     * @protected\n     */\n    this.carousel = document.querySelector(query);\n\n    if (!this.carousel) {\n      throw new Error(`can not find target ${query}`);\n    }\n\n    /**\n     * Carousel组件banner区域\n     * @type {Element}\n     * @protected\n     */\n    this.main = this.carousel.querySelector('.carousel__main');\n\n    if (!this.main) {\n      throw new Error('can not find target .carousel__main');\n    }\n\n    // 初始化样式\n    this.main.style.setProperty(PROP_LEN, length);\n\n    this.attach(bannerObserver(this.main));\n\n    this.swipe = new Swipe(group);\n    this.swipe.attach(swipeObserver(this, this.main));\n\n    this.bindListeners();\n  }\n\n  /**\n   * 页面总长度\n   * @type {number}\n   */\n  get length() {\n    const { length } = this.options;\n\n    return length;\n  }\n\n  /**\n   * 容器宽，即banner宽\n   * @type {number}\n   */\n  get offsetWidth() {\n    const { offsetWidth } = this.carousel;\n\n    return offsetWidth;\n  }\n\n  /**\n   * 事件绑定\n   * @private\n   */\n  bindListeners() {\n    const {\n      start,\n      move,\n      end,\n    } = this.swipe;\n\n    const swipeStart = start.bind(this.swipe);\n    const swipeMove = move.bind(this.swipe);\n    const swipeEnd = end.bind(this.swipe);\n\n    this.main.addEventListener('mousedown', swipeStart, false);\n    this.main.addEventListener('touchstart', swipeStart, false);\n\n    this.main.addEventListener('mousemove', swipeMove, false);\n    this.main.addEventListener('touchmove', swipeMove, false);\n\n    this.main.addEventListener('mouseup', swipeEnd, false);\n    this.main.addEventListener('touchend', swipeEnd, false);\n\n    this.main.addEventListener('mouseleave', swipeEnd, false);\n  }\n}\n\nexport default SwipeCarousel;\nexport {\n  bannerObserver,\n  swipeObserver,\n};\n"],"names":["Group","group","Error","_group","String","Subject","this","Carousel","opts","NaN","_typeof","TypeError","length","focus","delay","_options","Object","freeze","_this","state","isAutoplay","options","timeoutID","setTimeout","play","bind","clearTimeout","to","initFocus","nextid","setState","setAutoplay","reverse","clearAutoplay","go","next","PROP_LEN","PROCESS_PENDING","PROCESS_START","PROCESS_DONE","PROCESS_ERROR","styleObserver","replace","done","error","update","loader","status","classList","remove","add","ImageLoader","image","attach","item","rect","getBoundingClientRect","itemT","top","height","window","innerHeight","className","reserved","Promise","resolve","reject","img","Image","entries","dataset","forEach","key","val","includes","onload","onerror","src","appendChild","imgName","list","Array","from","document","getElementsByClassName","all","map","_this2","constructor","inview","loadImage","then","modalMachine","machine","visible","MODALCLOSE","MODALOPEN","hidden","Modal","modal","dialog","currentState","nextState","toString","prompt","swipeMachine","start","SWIPEMOVE","SWIPEEND","move","end","SWIPESTART","Swipe","swipe","x0","y0","x1","y1","e","changedTouches","dx","dy","absDx","Math","abs","absDy","action","unify","pos","clientX","clientY","swipeStart","swipeMove","swipeEnd","dispatch","bannerObserver","main","style","setProperty","swipeObserver","carousel","offsetWidth","rDx","isEdge","sin","PI","ratio","duration","sign","dimention","SwipeCarousel","query","slideBanner","querySelectorAll","querySelector","bindListeners","addEventListener"],"mappings":"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"}